<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Vue-CLI3</title>
      <link href="/2018/12/21/vue-cli3/"/>
      <url>/2018/12/21/vue-cli3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vue CLI 是一个基于 <code>Vue.js</code>进行快速开发的完整系统，提供：</p><ul><li>通过 <code>@vue/cli</code> 搭建交互式的项目脚手架</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发</li><li>运行时依赖，（<code>@vue/cli-service</code>）<ul><li>可升级</li><li>基于 webpack 构建，并带有合理的默认配置</li><li>可以通过项目内的配置文件进行配置</li><li>可以通过插件进行扩展</li></ul></li></ul><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化，它确保看各种构建工具能够基于智能的默认配置即可平稳衔接。也为每个工具提供了调整配置的灵活性，无需 eject。</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>CLI（<code>@vue/cli</code>）是一个全局安装的 npm 包，提供了终端里的 <code>vue</code>命令。</p><p>可以通过 <code>vue create</code> 快速创建一个新项目的脚手架，</p><p>或者直接通过 <code>vue serve</code> 构建新想法的原型。</p><p>使用<code>vue ui</code>命令，通过 一套图形化界面管理项目。</p><h3 id="CLI服务"><a href="#CLI服务" class="headerlink" title="CLI服务"></a>CLI服务</h3><p>CLI服务（<code>@vue/cli-service</code>）是一个开发环境依赖。</p><p>是一个 <code>npm 包</code>，局部安装在每个 <code>@vue/cli</code>创建的项目中</p><p><strong>CLI服务是构建与<code>webpack</code>和 <code>webpack-dev-server</code>之上的，包含了</strong></p><ul><li>加载其它 CLI 插件的核心服务</li><li>一个针对绝大部分应用优化过的内部的  webpack 配置</li><li>项目内部的 <code>vue-cli-service</code>命令，提供 <code>serve</code>、<code>build</code>、和<code>inspect</code> 命令</li></ul><p>注：CLI 服务 涵盖了 <code>@vue/cli-service</code> 的具体用法</p><h3 id="CLI-插件"><a href="#CLI-插件" class="headerlink" title="CLI 插件"></a>CLI 插件</h3><p>CLI插件是向 Vue 项目提供可选功能的 npm 包，</p><p>​      例： Babel/TypeScript 转译、ESLint 集成、单元检测和 end-to-end 测试</p><p>Vue CLI 插件的名字以 <code>@vue/cli-plugin-</code>（内建插件）或 <code>vue-cli-plugin-</code> （社区插件）开头，容易使用</p><p>在项目中运行 <code>vue-cli-service</code>命令时，会自动解析并加载 <code>package.json</code>中列出的所有的 CLI 插件</p><p>它们也可以被归成一组可复用的 preset。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>关于 vue-cli 旧版本</p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成 <code>@vue-cli</code>。如果已经全局安装了旧版本的  <code>vue-cli</code>（1.x 或 2.x），需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 进行卸载旧版本。</p></blockquote><blockquote><p>Node 版本要求</p><p>Vue CLI 需要 <code>Node.js</code> 8.9 或者更高版本</p></blockquote><p>安装 vue-cli 脚手架</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>安装完成后，检测其是否安装成功。使用命令检查其版本是否正确：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h2><p>可以使用 <code>vue serve</code> 和 <code>vue build</code> 命令对单个 <code>*.vue</code> 文件进行快速原型开发，安装全局扩展：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure><p><code>vue serve</code> 缺点：需要安装全局依赖，使得在不同机器上的一致性不能得到保证。</p><h3 id="vue-serve"><a href="#vue-serve" class="headerlink" title="vue serve"></a>vue serve</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage: serve [options] [entry]</span><br><span class="line"></span><br><span class="line">在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -o, --open  打开浏览器</span><br><span class="line">  -c, --copy  将本地 URL 复制到剪切板</span><br><span class="line">  -h, --<span class="built_in">help</span>  输出用法信息</span><br></pre></td></tr></table></figure><p><strong>需要在开发环境下，创建 main.js, index.js, App.vue or app.vue 等文件名的文件</strong></p><p>例：创建一个 <code>App.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Hello</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>然后在<code>App.vue</code>文件下，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue serve</span><br></pre></td></tr></table></figure><p>或指定入口文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue serve hello.vue</span><br></pre></td></tr></table></figure><p>还可以提供一个 <code>index.html</code> 、<code>package.json</code>  安装并使用本地依赖。</p><p><code>vue build</code> 同 <code>vue serve</code> 使用方法</p><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>vue create</p><p>运行以下命令创建新项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue new hello-world</span><br></pre></td></tr></table></figure><blockquote><p>如果你在 Windows 上通过 minTTY 使用 Git Bash  创建项目， 交互提示符并不进行工作。必须通过  <code>winpty vue.cmd create hello-world</code> 启动创建项目命令。</p><p>对于 minTTY  这个我并不是很了解，但是 之前我入过一个坑：</p><p>使用 <code>Git Bash</code> 创建 vue 项目，</p><p>命令为  <code>vue create</code> 无法去手动选择一些特性，退出也不是很方便。</p><h5 id="如果创建项目使用的不是-cmd-命令，而是使用-Git-Bash-创建，请使用-winpty-vue-cmd-create-项目名称-创建项目"><a href="#如果创建项目使用的不是-cmd-命令，而是使用-Git-Bash-创建，请使用-winpty-vue-cmd-create-项目名称-创建项目" class="headerlink" title="如果创建项目使用的不是 cmd 命令，而是使用 Git Bash 创建，请使用  winpty vue.cmd create 项目名称 创建项目"></a>如果创建项目使用的不是 cmd 命令，而是使用 Git Bash 创建，请使用  <code>winpty vue.cmd create 项目名称</code> 创建项目</h5></blockquote><p>手动选择特性： <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">vue-cli 手动选择特性</a></p><h2 id="插件-和-Preset"><a href="#插件-和-Preset" class="headerlink" title="插件 和 Preset"></a>插件 和 Preset</h2><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>Vue CLI 使用了一套基于插件的架构。查看  新建项目 根目录的 package.json ，发现依赖都是以 <code>@vue/cli-plugin-</code> 开头的。插件可以修改 webpack 的内部配置，也可以向  <code>vue-cli-service</code> 注入命令。</p><blockquote><p>可以通过 <code>vue ui</code> 命令使用 GUI 安装和管理插件。</p></blockquote><p><strong>在现有的项目中安装</strong></p><p>使用 <code>vue create</code>  创建新项目时，有的插件会根据选择的特性进行安装。如果想在一个已经创建好的项目中安装插件，使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add [@vue/eslint]扩展名称</span><br></pre></td></tr></table></figure><blockquote><p>注：在使用 <code>vue add</code> 添加扩展之前，将最新的状态进行提交，因为该命令可能调用插件的文件生成器并更改现有的文件。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-组件</title>
      <link href="/2018/12/21/vue-zu-jian/"/>
      <url>/2018/12/21/vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-component </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2018/12/20/mian-xiang-dui-xiang-bian-cheng/"/>
      <url>/2018/12/20/mian-xiang-dui-xiang-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>编程方式：面向过程和面向对象</p><p>OOP（面向对象程序设计）</p><ul><li>类和对象</li><li>命名空间</li><li>类的自动加载</li><li>魔术方法</li><li>静态成员</li><li>异常</li><li>继承</li></ul><p>类的三大特性：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul><li>一般类名首字母大写</li><li>一个类对应一个文件，文件名和类名相同</li><li>类中，只可以包含常量，属性，方法</li><li>私有和受保护的属性和方法名前添加一个  _ ，从而了解特性</li></ul><p>定义：</p><ul><li>常量      const</li><li>属性</li><li>方法</li></ul><p>访问：</p><ul><li>引入类文件</li><li>属性和方法  使用 $对象-&gt;访问</li><li>常量 和静态成员     使用 类名:: 访问  </li></ul><h1 id="this"><a href="#this" class="headerlink" title="$this"></a>$this</h1><p>在类中：</p><ul><li>访问属性和方法 使用 $this-&gt;   访问<ul><li>$this-&gt;  指类本身</li></ul></li><li>访问常量 和 静态成员  使用   self::访问 </li></ul><h1 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间   namespace"></a>命名空间   namespace</h1><p>使用类时，前面必须加上命名空间</p><p>\   命名空间符号</p><p>命名空间和类文件所在的目录相同</p><p>namespace 必须是文件第一行代码</p><h1 id="类文件的自动加载"><a href="#类文件的自动加载" class="headerlink" title="类文件的自动加载"></a>类文件的自动加载</h1><h2 id="注册函数"><a href="#注册函数" class="headerlink" title="注册函数"></a>注册函数</h2><p>spl_autoload_register(函数名)</p><p>当一个类不存在的时候，注册的函数会被自动调用</p><h2 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h2><p>对传入的类名，进行处理</p><p>然后引入响应的文件</p><pre><code>//   命名空间和文件夹的名称相同function autoload($class){    //  处理参数    //  引入文件}</code></pre><h2 id="include-require"><a href="#include-require" class="headerlink" title="include  require"></a>include  require</h2><ul><li>作用：</li></ul><ul><li>作用<ul><li>在执行流中插入写在其他文件中的有用代码</li></ul></li><li>区别：<ul><li>require  生成一个致命错误，在错误发生之后脚本会停止执行</li><li>include  生成一个警告，在错误发生后脚本会继续执行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker</title>
      <link href="/2018/12/20/docker/"/>
      <url>/2018/12/20/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>Docker 是一个开源的应用容器引擎。</p><p>特点</p><p>Docker 是容器技术，从主机上隔离出多个独立的子系统，容器技术和主机是共享系统内核</p><p>虚拟机是从主机中完全隔离出的一个系统</p><p>由于Docker 与主机共享内核，有一下优势：</p><p>1、速度更快</p><p>Docker容器开启只需50毫秒</p><p>2、更加轻量</p><p>虚拟机中每个都是一套独立的系统，使得每个虚拟机都非常大。Docker 使用了分层的技术，不同的镜像之间可以共享相同的层，这使得容器尺寸很小</p><p>3、更加节省资源</p><p>Docker 是共享主机内核，启动一个docker就和启动一个普通程序一样，所以我们可以开启上千个Docker容器。</p><p>Docker化</p><p>将程序进行Docker化</p><p>什么是Docker化？</p><p>是指将开发的系统制作成一个镜像，当新的机器上要部署该项目时，只需要拉取镜像然后就可以直接创建容器来运行，这样就省去了重新安装运行环境的步骤</p><p>安装</p><p>Docker 可以安装、运行在常见的 Linux 系统上，而对于 Windows和 Mac 系统也有办法安装</p><p>windows：Windows10专业版，Windows10教育版，可以进行直接安装，如果是老的版本需要安装 Docker 虚拟机。</p><p>执行命名，查看是否安装成功</p><pre><code>docker -v  docker --version</code></pre><p>如果想要查看 docker 的详细信息，执行</p><pre><code>docker version</code></pre><p>使用docker</p><p>关键词</p><p>镜像（image）：已经打包好的 Docker 应用，类似于一个程序的安装包</p><p>镜像仓库： 存储镜像的服务器   </p><pre><code>连接地址：https://hub.docker.com/</code></pre><p>容器：有一个镜像的时候我们可以创建多个容器，容器就是运行着的镜像，容器之间是隔离的</p><p>常用指令</p><p>  指令                      说明<br>  docker images           查看已经下载的镜像<br>  docker rmi 镜像名称：标签名     删除已下载的镜像<br>  docker search 镜像        从官方仓库（hub.docker.com）查找镜像<br>  docker pull 镜像名称：标签名    从官方仓库下载镜像（标签名默认是latest） 代表最新版本<br>  docker run              创建容器<br>  docker ps               查看已经运行的容器<br>  docker ps -a            查看所有创建的容器<br>  docker rm 容器名称          删除已经停止的容器<br>  docker rm -f  容器名称      删除正在运行的容器<br>  docker start 容器名称       启动容器<br>  docker stop 容器名称        停止容器<br>  docker  restart 容器名称    重启容器<br>  docker exec             执行容器中的指令                      </p><p>创建容器</p><p>创建容器常用的参数：</p><pre><code>docker run --name 容器名称 -d -p 主机端口：容器内端口 -e 环境变量 --link 其他容器名：容器别名 镜像名称：标签名</code></pre><ul><li>–name  指定容器的名称</li><li>-d     容器在后台运行</li><li>-p     绑定端口号，容器内部的端口号无法在外部访问，必须经过绑定之后才可以进行访问</li><li>-e   设置容器中的环境变量</li><li>–link    连接其他的容器</li></ul><p>示例：创建一个mysql容器，密码是 123123，绑定班底 13306端口到容器的 3306端口</p><pre><code>docker run --name mysql001 -d -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123123 mysql:5.6.42</code></pre><ul><li>MYSQL_ROOT_PASSWORD   环境变量用来设置这个容器中的MySQL的密码</li></ul><p>创建成功后，如果容器启动成功，使用docker ps  指令查看</p><p>启动之后，容器内部就运行了 mysql 服务器，在容器内部监听 3306 端口，已经将这个端口绑定到了主机的 13306 端口</p><p>进入容器</p><p>进入容器使用   docker exec  指令来实现</p><p>docker exec 指令：[执行一个运行着的容器中的命令]</p><pre><code>docker exec -it 容器名称 命令</code></pre><ul><li>docker exec -it mysql001 mkdir data</li></ul><p>进入容器内：[docker exec]</p><pre><code>docker exec -it mysql001 bash</code></pre><p>或</p><pre><code>docker exec -it mysql001 /bin/sh</code></pre><ul><li>-it    以实时交互的形式运行 （与 -d 正好相反）<br>执行  exit指令  可以退出容器 </li></ul><p>链接容器</p><p>Docker  推荐我们一个容器中只运行一个主要的应用程序</p><p>例如：我们要创建一个PHP + MySQL</p><ul><li><p>运行一个 MySQL 容器</p><p>  docker run –name mysql001 -d -p 13306:3306 -e MYSQL_ROOT_PASSWORD mysql:latest</p></li><li><p>连接SQL库</p></li></ul><ul><li><p>创建 PHP 容器</p><p>  docker run –name php -d –link mysql001:mysql php:7.2.12-fpm-alpine3.8</p></li><li><p>创建链接之后就可以在容器中使用别名进行通信</p><p>  //  进入容器<br>  docker exec -it 容器名称 /bin/sh<br>  //  创建文件<br>  touch pdo.php<br>  //  进入文件进行编辑<br>  vi pdo.php</p><p>  //  内容<br>  $pdo = new PDO(‘mysql:host=链接别名;dbname=数据库名’,’root’,’123123’)</p></li></ul><p>扩展：我们可以同时链接多个容器</p><pre><code>docker run --name php001 -d --link mysql001:mysql1 --link mysql002:mysql2 php:7.2.12-fpm-alpine3.8</code></pre><p>注：</p><pre><code>当创建容器的时候，如果发现本地没有镜像就会自动下载最新的镜像，下载完之后就创建容器</code></pre><p>挂载硬盘</p><p>问题一、数据是保存在容器里的，如果容器删除了数据也就删除了。</p><p> 问题二、每次要修改容器时，必须要进入到容器中去修改</p><p>为了能够保存（持久化）数据以及共享容器间的数据，Docker 提出了 Volume 的概念。</p><p>可以使用 -v  这个参数，将容器中的一个目录或文件  和 主机上的目录或文件进行绑定，绑定之后，修改主机上的这个文件就相当于修改了容器中的文件，删除容器之后，绑定的目录和文件还在主机（不会被删除）。</p><p>为了实现主机和容器之间的数据共享，我们可以在创建容器时添加  -v  参数</p><pre><code>docker run .... -v 主机目录：容器中的目录  ....</code></pre><p>示例：创建mysql 容器并将数据目录挂载到主机</p><pre><code>docker run --name mysql55 -d -v E:/mysql55:/var/lib/mysql -p 13308:3306 -e MYSQL_ROOT_PASSWORD=123123 mysql:5.6.42</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/20/hello-world/"/>
      <url>/2018/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
