<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2018/12/20/mian-xiang-dui-xiang-bian-cheng/"/>
      <url>/2018/12/20/mian-xiang-dui-xiang-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>编程方式：面向过程和面向对象</p><p>OOP（面向对象程序设计）</p><ul><li>类和对象</li><li>命名空间</li><li>类的自动加载</li><li>魔术方法</li><li>静态成员</li><li>异常</li><li>继承</li></ul><p>类的三大特性：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul><li>一般类名首字母大写</li><li>一个类对应一个文件，文件名和类名相同</li><li>类中，只可以包含常量，属性，方法</li><li>私有和受保护的属性和方法名前添加一个  _ ，从而了解特性</li></ul><p>定义：</p><ul><li>常量      const</li><li>属性</li><li>方法</li></ul><p>访问：</p><ul><li>引入类文件</li><li>属性和方法  使用 $对象-&gt;访问</li><li>常量 和静态成员     使用 类名:: 访问  </li></ul><h1 id="this"><a href="#this" class="headerlink" title="$this"></a>$this</h1><p>在类中：</p><ul><li>访问属性和方法 使用 $this-&gt;   访问<ul><li>$this-&gt;  指类本身</li></ul></li><li>访问常量 和 静态成员  使用   self::访问 </li></ul><h1 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间   namespace"></a>命名空间   namespace</h1><p>使用类时，前面必须加上命名空间</p><p>\   命名空间符号</p><p>命名空间和类文件所在的目录相同</p><p>namespace 必须是文件第一行代码</p><h1 id="类文件的自动加载"><a href="#类文件的自动加载" class="headerlink" title="类文件的自动加载"></a>类文件的自动加载</h1><h2 id="注册函数"><a href="#注册函数" class="headerlink" title="注册函数"></a>注册函数</h2><p>spl_autoload_register(函数名)</p><p>当一个类不存在的时候，注册的函数会被自动调用</p><h2 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h2><p>对传入的类名，进行处理</p><p>然后引入响应的文件</p><pre><code>//   命名空间和文件夹的名称相同function autoload($class){    //  处理参数    //  引入文件}</code></pre><h2 id="include-require"><a href="#include-require" class="headerlink" title="include  require"></a>include  require</h2><ul><li>作用：</li></ul><ul><li>作用<ul><li>在执行流中插入写在其他文件中的有用代码</li></ul></li><li>区别：<ul><li>require  生成一个致命错误，在错误发生之后脚本会停止执行</li><li>include  生成一个警告，在错误发生后脚本会继续执行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker</title>
      <link href="/2018/12/20/docker/"/>
      <url>/2018/12/20/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>Docker 是一个开源的应用容器引擎。</p><p>特点</p><p>Docker 是容器技术，从主机上隔离出多个独立的子系统，容器技术和主机是共享系统内核</p><p>虚拟机是从主机中完全隔离出的一个系统</p><p>由于Docker 与主机共享内核，有一下优势：</p><p>1、速度更快</p><p>Docker容器开启只需50毫秒</p><p>2、更加轻量</p><p>虚拟机中每个都是一套独立的系统，使得每个虚拟机都非常大。Docker 使用了分层的技术，不同的镜像之间可以共享相同的层，这使得容器尺寸很小</p><p>3、更加节省资源</p><p>Docker 是共享主机内核，启动一个docker就和启动一个普通程序一样，所以我们可以开启上千个Docker容器。</p><p>Docker化</p><p>将程序进行Docker化</p><p>什么是Docker化？</p><p>是指将开发的系统制作成一个镜像，当新的机器上要部署该项目时，只需要拉取镜像然后就可以直接创建容器来运行，这样就省去了重新安装运行环境的步骤</p><p>安装</p><p>Docker 可以安装、运行在常见的 Linux 系统上，而对于 Windows和 Mac 系统也有办法安装</p><p>windows：Windows10专业版，Windows10教育版，可以进行直接安装，如果是老的版本需要安装 Docker 虚拟机。</p><p>执行命名，查看是否安装成功</p><pre><code>docker -v  docker --version</code></pre><p>如果想要查看 docker 的详细信息，执行</p><pre><code>docker version</code></pre><p>使用docker</p><p>关键词</p><p>镜像（image）：已经打包好的 Docker 应用，类似于一个程序的安装包</p><p>镜像仓库： 存储镜像的服务器   </p><pre><code>连接地址：https://hub.docker.com/</code></pre><p>容器：有一个镜像的时候我们可以创建多个容器，容器就是运行着的镜像，容器之间是隔离的</p><p>常用指令</p><p>  指令                      说明<br>  docker images           查看已经下载的镜像<br>  docker rmi 镜像名称：标签名     删除已下载的镜像<br>  docker search 镜像        从官方仓库（hub.docker.com）查找镜像<br>  docker pull 镜像名称：标签名    从官方仓库下载镜像（标签名默认是latest） 代表最新版本<br>  docker run              创建容器<br>  docker ps               查看已经运行的容器<br>  docker ps -a            查看所有创建的容器<br>  docker rm 容器名称          删除已经停止的容器<br>  docker rm -f  容器名称      删除正在运行的容器<br>  docker start 容器名称       启动容器<br>  docker stop 容器名称        停止容器<br>  docker  restart 容器名称    重启容器<br>  docker exec             执行容器中的指令                      </p><p>创建容器</p><p>创建容器常用的参数：</p><pre><code>docker run --name 容器名称 -d -p 主机端口：容器内端口 -e 环境变量 --link 其他容器名：容器别名 镜像名称：标签名</code></pre><ul><li>–name  指定容器的名称</li><li>-d     容器在后台运行</li><li>-p     绑定端口号，容器内部的端口号无法在外部访问，必须经过绑定之后才可以进行访问</li><li>-e   设置容器中的环境变量</li><li>–link    连接其他的容器</li></ul><p>示例：创建一个mysql容器，密码是 123123，绑定班底 13306端口到容器的 3306端口</p><pre><code>docker run --name mysql001 -d -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123123 mysql:5.6.42</code></pre><ul><li>MYSQL_ROOT_PASSWORD   环境变量用来设置这个容器中的MySQL的密码</li></ul><p>创建成功后，如果容器启动成功，使用docker ps  指令查看</p><p>启动之后，容器内部就运行了 mysql 服务器，在容器内部监听 3306 端口，已经将这个端口绑定到了主机的 13306 端口</p><p>进入容器</p><p>进入容器使用   docker exec  指令来实现</p><p>docker exec 指令：[执行一个运行着的容器中的命令]</p><pre><code>docker exec -it 容器名称 命令</code></pre><ul><li>docker exec -it mysql001 mkdir data</li></ul><p>进入容器内：[docker exec]</p><pre><code>docker exec -it mysql001 bash</code></pre><p>或</p><pre><code>docker exec -it mysql001 /bin/sh</code></pre><ul><li>-it    以实时交互的形式运行 （与 -d 正好相反）<br>执行  exit指令  可以退出容器 </li></ul><p>链接容器</p><p>Docker  推荐我们一个容器中只运行一个主要的应用程序</p><p>例如：我们要创建一个PHP + MySQL</p><ul><li><p>运行一个 MySQL 容器</p><p>  docker run –name mysql001 -d -p 13306:3306 -e MYSQL_ROOT_PASSWORD mysql:latest</p></li><li><p>连接SQL库</p></li></ul><ul><li><p>创建 PHP 容器</p><p>  docker run –name php -d –link mysql001:mysql php:7.2.12-fpm-alpine3.8</p></li><li><p>创建链接之后就可以在容器中使用别名进行通信</p><p>  //  进入容器<br>  docker exec -it 容器名称 /bin/sh<br>  //  创建文件<br>  touch pdo.php<br>  //  进入文件进行编辑<br>  vi pdo.php</p><p>  //  内容<br>  $pdo = new PDO(‘mysql:host=链接别名;dbname=数据库名’,’root’,’123123’)</p></li></ul><p>扩展：我们可以同时链接多个容器</p><pre><code>docker run --name php001 -d --link mysql001:mysql1 --link mysql002:mysql2 php:7.2.12-fpm-alpine3.8</code></pre><p>注：</p><pre><code>当创建容器的时候，如果发现本地没有镜像就会自动下载最新的镜像，下载完之后就创建容器</code></pre><p>挂载硬盘</p><p>问题一、数据是保存在容器里的，如果容器删除了数据也就删除了。</p><p> 问题二、每次要修改容器时，必须要进入到容器中去修改</p><p>为了能够保存（持久化）数据以及共享容器间的数据，Docker 提出了 Volume 的概念。</p><p>可以使用 -v  这个参数，将容器中的一个目录或文件  和 主机上的目录或文件进行绑定，绑定之后，修改主机上的这个文件就相当于修改了容器中的文件，删除容器之后，绑定的目录和文件还在主机（不会被删除）。</p><p>为了实现主机和容器之间的数据共享，我们可以在创建容器时添加  -v  参数</p><pre><code>docker run .... -v 主机目录：容器中的目录  ....</code></pre><p>示例：创建mysql 容器并将数据目录挂载到主机</p><pre><code>docker run --name mysql55 -d -v E:/mysql55:/var/lib/mysql -p 13308:3306 -e MYSQL_ROOT_PASSWORD=123123 mysql:5.6.42</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/20/hello-world/"/>
      <url>/2018/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
